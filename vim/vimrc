" General Config {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" base
set nocompatible                      " vim, not vi
filetype plugin indent on             " try to recognise filetype and load plugins and indent files
set noswapfile                        " disable swap files
set background=dark
" set nowrap                            " don't wrap text when buffer width is too small
syntax on                             " syntax highlighting

" interface
set noshowmode                        " don't show mode
set number                            " show line numbers
set signcolumn=yes                    " show gutter always
set ruler                             " show current position at bottom
set scrolloff=5                       " keep at least 5 lines above/below
set sidescrolloff=5                   " keep at least 5 lines left/right
set showcmd                           " show any commands
set sidescroll=1                      " smoother horizontal scrolling
set splitbelow                        " create new splits below
set splitright                        " create new splits to the right
set wildmenu                          " enable wildmenu, cmd line completion
set wildmode=longest:full,full        " configure wildmenu
set hidden                            " buffers can exist in the background
set gcr=a:blinkon0                    " disable cursor blink
set showmatch                         " show bracket matches
set laststatus=2                      " always show status bar
set list listchars=tab:\│\ ,trail:·     " show extra space characters
set cursorline                        " highlight current line
set encoding=UTF-8
set guifont=Iosevka\ Nerd\ Font:h14
" set conceallevel=3                    " hide concealed text
set updatetime=300                    " You will have bad experience for diagnostic messages when it's default 4000.
" set guifont=Iosevka:h11
" set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20
" set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
" set relativenumber                    " show relative line numbers
" set shortmess+=aAIsT                  " disable welcome screen and other messages

" whitespace
set expandtab                         " use spaces, not tabs
set shiftwidth=2                      " amount of space used for indentation
set softtabstop=2                     " appearance of tabs
set tabstop=2                         " use two spaces for tabs
" set nojoinspaces                      " use one space, not two, after punctuation

" folding
set foldenable                        " enable code folding
set foldmethod=marker                 " fold by inserting {{{,}}}

" interaction
set backspace=indent,eol,start        " allow backspace in insert mode
set mousehide                         " hide the mouse cursor while typing
" set iskeyword+=-                      " add dash to iskeyword

" searching
set hlsearch                          " highlight search matches
set ignorecase                        " set case insensitive searching
set incsearch                         " find as you type search
set smartcase                         " case sensitive searching when not all lowercase

" background processes
set history=1000                      " store lots of :cmdline history
set autoread                          " automatically update file when changed outside of vim
set autoindent                        " copy indentation from the previous line for new line
set timeoutlen=1000                   " mapping delays
set ttimeoutlen=0                     " key code delays
" set clipboard=unnamed                 " use native clipboard
set nobackup                          " don't save backups
set nowritebackup                     " don't save a backup while editing
set visualbell                        " no sounds
" set lazyredraw                        " improve re-playing macros
" set redrawtime=10000
" set re=1
set ttyfast                           " indicates a fast terminal connection
set completeopt=menu,menuone,preview,noselect,noinsert
set undofile                          " maintain undo history between sessions
set undodir=~/.vim/undodir

" in many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  " mouse scroll 1 line instead of 3
  map <ScrollWheelUp> <C-Y>
  map <ScrollWheelDown> <C-E>
endif

" have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" hint to keep lines short
if exists('+colorcolumn')
  set colorcolumn=80
endif

" silently execute python3 once
if has('python3')
  silent! python3 1
endif

" resize panes with mouse within tmux
set mouse+=a
if &term =~ '^screen'
   " tmux knows the extended mouse mode
   set ttymouse=xterm2
endif

" change filetype of pcss to css
au BufRead,BufNewFile *.pcss set filetype=pcss.css
au BufRead,BufNewFile *.scss set filetype=scss.css

"}}}

" Mappings {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" change leader to comma
let mapleader=','
let localleader='\'

" open netrw
nnoremap - :Ex<CR>

" netrw (default vim nerdtree)
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" Shift-j/k in visual mode allows for moving lines up and down
vnoremap <silent>J :m '>+1<CR>gv=gv
vnoremap <silent>K :m '<-2<CR>gv=gv

" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
" nnoremap <silent><C-j> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
" nnoremap <silent><C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
" nnoremap <silent><A-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
" nnoremap <silent><A-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

" python
let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'

" svelte
let g:svelte_preprocessor_tags = [
  \ { 'name': 'ts', 'tag': 'script', 'as': 'typescript' }
  \ ]
let g:svelte_preprocessors = ['ts']

" correct vue syntax highlighting of style tag
let html_no_rendering=1

" set cursorshape based on mode
" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" http://sourceforge.net/mailarchive/forum.php?thread_name=AANLkTinkbdoZ8eNR1X2UobLTeww1jFrvfJxTMfKSq-L%2B%40mail.gmail.com&forum_name=tmux-users
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" edit config files
nmap <leader>ev :tabedit ~/.vimrc<CR>
nmap <leader>eu :tabedit ~/.vim/my-snippets/UltiSnips/all.snippets<CR>
nmap <leader>ez :tabnew ~/.zshrc<CR>
nmap <leader>ea :tabnew ~/.aliases<CR>
nmap <leader>et :tabnew ~/.tmux.conf<CR>
nmap <leader>ek :tabnew ~/.config/kitty/kitty.conf<CR>
nmap <leader>es :tabnew ~/dotfiles/init.sh<CR>

" Reload Coc
nmap <leader>R :CocRestart<CR>

" Show signature help in insert mode
" Does not work
" inoremap <silent><C-h> CocActionAsync('showSignatureHelp')<CR>

" jj acts as the escape key
inoremap jj <Esc>

" move vertically down by visual line
nnoremap j gj

" move vertically up by visual line
nnoremap k gk

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" space open/closes folds
nnoremap <space> za

" toggle NERDTree on/off
nnoremap <leader>n :NERDTreeToggle<CR>

" toggle FZF search for files
" nnoremap <leader>f :FZF<CR>
" nnoremap <leader>f :GFiles<CR>
" nnoremap <leader>f :Files<CR>
" command! -bang -nargs=? -complete=dir Files
"   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Only search for content inside of files, not file names
" command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
command! -bang -nargs=* Rg
  \ call fzf#vim#grep('rg --column --no-heading --line-number --color=always '.shellescape(<q-args>),
  \ 1,
  \ fzf#vim#with_preview({'options': '--delimiter : --nth 3..'},),
  \ <bang>0)

command! FZFFiles execute (exists("*fugitive#head") && len(fugitive#head())) ? 'GFiles' : 'Files'
command! Gd execute 'GFiles?'
nnoremap <leader>f :FZFFiles<CR>
nnoremap ' :GFiles?<CR>

" toggle FZF search in files
" command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)
" command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
nnoremap <Leader>a :Rg<CR>

" toggle FZF :Buffers
nnoremap ; :Buffers<CR>

" new buffer in current window
nnoremap <C-n><CR> :enew<CR>
" new buffer in new tab
nnoremap <C-n>t :tabnew<CR>
" new buffer in vsplit window
nnoremap <C-n>v :vnew<CR>
" new buffer in split window
nnoremap <C-n>s :new<CR>

" copy till end of line, instead of entire line
nnoremap Y y$

" join next line but maintain cursor position
nnoremap J mzJ`z

" keep cursor in the middle when jumping in the page
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
" keep cursor in the middle when jumping between search results
" nnoremap n nzzzv
" nnoremap N Nzzzv

" break lines, custom opposite <shift>J
nnoremap K ^f<Space>xi<CR><Esc>

" quicker window movement, disabled for vim-tmux-navigator
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" adjust window size with arrow keys
noremap <right> <C-w>5>
noremap <left> <C-w>5<
noremap <up> <C-w>5+
noremap <down> <C-w>5-

" make vim yank/paste from and to the system's clipboard
vnoremap <C-c> "*y
nnoremap <leader>y "*y
vnoremap <leader>y "*y
nnoremap <leader>Y "*Y
" nnoremap <leader>d "_d
" vnoremap <leader>d "_d

" remove Q binding/map
nnoremap Q <nop>

" keep selection after indent
vnoremap < <gv
vnoremap > >gv"

" lowercase i/a as alternative to uppercase I/A to insert in block mode
vnoremap <expr> i mode()=~'\cv' ? 'i' : 'I'
vnoremap <expr> a mode()=~'\cv' ? 'a' : 'A'

" search for visually selected text
vnoremap // y/<C-R>"<CR>

" move to the previous buffer
nmap <leader>w :b#<CR>

" change slashed to dashes
vnoremap <leader>s :s/\//-/g<CR>

" close the current buffer and move to the previous one
" this replicates the idea of closing a tab
" nmap <leader>w :b#<bar>bd#<CR>

" toggle spell checking
set spelllang=en_us
nmap <leader>ss :setlocal spell!<cr>

""" move to misspelled word: '[s' and ']s'
""" suggest alternative: 'z='
""" vim is wrong, add to dictionary: 'zg'
""" vim does not detect wrong word, mark as incorrect: 'zw'

" open omni completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <C-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
            \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" open user completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
            \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'

" markdownPreview
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
let g:instant_markdown_autostart = 0    " disable autostart
nnoremap <leader>md :InstantMarkdownPreview<CR>

" open file in github
nnoremap <leader>og :.GBrowse<CR>

" show git blame
nnoremap gb :Git blame<CR>

" disable arrow movement, resize splits instead.
nnoremap <Left> :vertical resize -1<CR>
nnoremap <Right> :vertical resize +1<CR>
nnoremap <Up> :resize -1<CR>
nnoremap <Down> :resize +1<CR>

" paste with cmd-v (<D-V>) in paste mode
" :imap <D-V> ^O"+p"
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" fix mouse click past 220th column
if !has('nvim')
  if has("mouse_sgr")
    set ttymouse=sgr
  else
    set ttymouse=xterm2
  end
endif

" Diffview.nvim
nnoremap <leader>do :DiffviewOpen<CR>
nnoremap <leader>dc :DiffviewClose<CR>
nnoremap <leader>dfh :DiffviewFileHistory<CR>

" gitsigns
nnoremap <leader>dd :Gitsigns preview_hunk<CR>

" Copy path of current file
map <leader>l :let @*=expand("%")<CR>

" Copy path of current file with line number
""" Relative path to file: %
""" Absolute path to file: %:p
""" Filename only: %:t
""" Directory name only: %:p:h
map <leader>l :let @*=fnamemodify(expand("%"), ":~:.") . ":" . line(".")<CR>

" visually select text between matching object
" noremap % v%
"}}}

" Plugins {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Load vim-plug
" if empty(glob("~/.vim/autoload/plug.vim"))
"   execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
" endif

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" syntax highlighting
" Plug 'RRethy/base16-nvim'
Plug 'sheerun/vim-polyglot'
Plug 'posva/vim-vue'
" Plug 'valloric/matchtagalways'
Plug 'alexlafroscia/postcss-syntax.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'jxnblk/vim-mdx-js'
" Plug 'findango/vim-mdx'
" Plug 'ap/vim-css-color'
" Plug 'othree/html5.vim' "svelte
" Plug 'pangloss/vim-javascript' "svelte
" Plug 'evanleck/vim-svelte', {'branch': 'main'} "svelte
Plug 'Shougo/context_filetype.vim'

" text manipulation
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
" Plug 'scrooloose/nerdcommenter'
" Plug 'preservim/nerdcommenter'
Plug 'numToStr/Comment.nvim'
Plug 'flowtype/vim-flow'
" post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', { 'do': 'yarn install --frozen-lockfile --production' }
" Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'vue', 'html', 'svelte'] }
" Plug 'sbdchd/neoformat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'https://github.com/adelarsq/vim-matchit'
" Plug 'SirVer/ultisnips'
" Plug 'w0rp/ale'
" Plug 'svermeulen/vim-easyclip'
" Plug 'ervandew/supertab'

" movement
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" FZF & CoC
" :CocInstall coc-tsserver coc-eslint coc-tslint coc-tslint-plugin coc-html coc-json coc-vetur coc-prettier coc-css coc-svelte
" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/jsonc.vim'
Plug 'antoinemadec/coc-fzf', {'branch': 'release'}

" Telescope
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'branch': '0.1.x' }

Plug 'wincent/ferret'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'

" interface
Plug 'tpope/vim-obsession'
Plug 'chriskempson/base16-vim'
Plug 'flazz/vim-colorschemes'
" Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
Plug 'itchyny/lightline.vim'
Plug 'wesQ3/vim-windowswap'
" Plug 'junegunn/goyo.vim'
" Plug 'jeetsukumaran/vim-buffergator'
" Plug 'ap/vim-buftabline'

" git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'lewis6991/gitsigns.nvim'
" Plug 'airblade/vim-gitgutter'
Plug 'sindrets/diffview.nvim'

" Icons
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
" let g:deoplete#enable_at_startup = 1

call plug#end()
"}}}

" Plugin settings {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""
" UltiSnips plugin
"""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<c-y>""
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"
let g:UltiSnipsSnippetDirectories=[
      \ $HOME."/.vim/my-snippets/UltiSnips",
      \]

"""""""""""""""""""""""""""""""""""""""""""
" NerdTree plugin
"""""""""""""""""""""""""""""""""""""""""""
" Automatically delete the buffer of the file you just deleted with NerdTree
let NERDTreeAutoDeleteBuffer = 1

" Remove help messge
let NERDTreeMinimalUI = 1

" Remove arrows in front of folders
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"
let NERDTreeNodeDelimiter = "\x07"
let g:NERDTreeGlyphReadOnly = "RO"

" color of directories
highlight! link NERDTreeFlags NERDTreeDir

"""""""""""""""""""""""""""""""""""""""""""
" Devicons plugin
"""""""""""""""""""""""""""""""""""""""""""
" After a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif

" let g:indent_guides_exclude_filetypes = ['nerdtree']
" let g:WebDevIconsOS = 'Darwin'
" let g:DevIconsEnableFoldersOpenClose = 1
" let g:DevIconsEnableFolderExtensionPatternMatching = 1
" let g:webdevicons_conceal_nerdtree_brackets = 1
" let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''

let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'ƛ'

" let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
" let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
" let g:NERDTreeDirArrowExpandable = "\u00a0"
" let g:NERDTreeDirArrowCollapsible = "\u00a0"
" let g:DevIconsEnableNERDTreeRedraw = 1

"""""""""""""""""""""""""""""""""""""""""""
" MatchTagAlways plugin
"""""""""""""""""""""""""""""""""""""""""""
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'vue' : 1,
    \ 'js' : 1,
    \ 'jsx' : 1,
    \}

"""""""""""""""""""""""""""""""""""""""""""
" Ferret plugin
"""""""""""""""""""""""""""""""""""""""""""
" let g:FerretJob=0

"""""""""""""""""""""""""""""""""""""""""""
" AutoPairs plugin
"""""""""""""""""""""""""""""""""""""""""""
let g:AutoPairsCenterLine = 0

"""""""""""""""""""""""""""""""""""""""""""
" Goyo plugin
"""""""""""""""""""""""""""""""""""""""""""
" function! s:auto_goyo()
"   if &ft == 'markdown'
"     Goyo 80
"   elseif exists('#goyo')
"     let bufnr = bufnr('%')
"     Goyo!
"     execute 'b '.bufnr
"   endif
" endfunction

"""""""""""""""""""""""""""""""""""""""""""
" CoC plugin theme
"""""""""""""""""""""""""""""""""""""""""""
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" let g:coc_global_extensions = [
"   'coc-emoji', 'coc-eslint', 'coc-prettier',
"   'coc-tsserver', 'coc-tslint', 'coc-tslint-plugin',
"   'coc-css', 'coc-json', 'coc-pyls', 'coc-yaml'
" ]

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-p> for trigger completion.
inoremap <silent><expr> <c-p> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

"""""""""""""""""""""""""""""""""""""""""""
" Lightline plugin theme
"""""""""""""""""""""""""""""""""""""""""""
" Currently : wombat, solarized, powerline, jellybeans, Tomorrow,
" Tomorrow_Night, Tomorrow_Night_Blue, Tomorrow_Night_Eighties,
" PaperColor, seoul256, landscape, one, Dracula, darcula,
" molokai, materia, material, OldHope, nord, 16color and deus
" I like: Tomorrow_Night_Eighties, deus
let g:lightline = {
  \ 'colorscheme': 'Tomorrow_Night_Eighties',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'filename': 'FilenameForLightline',
  \   'cocstatus': 'coc#status',
  \ },
\ }

" show full path of filename
function! FilenameForLightline()
  return fnamemodify(expand("%"), ":~:.")
  " return expand('%:p')
endfunction

" update lightline
function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

" make statusbar background transparent
" let s:palette = g:lightline#colorscheme#{g:lightline.colorscheme}#palette
" let s:palette.normal.middle = [ [ 'NONE', 'NONE', 'NONE', 'NONE' ] ]
" let s:palette.inactive.middle = s:palette.normal.middle
" let s:palette.tabline.middle = s:palette.normal.middle

"""""""""""""""""""""""""""""""""""""""""""
" Closetag plugin
"""""""""""""""""""""""""""""""""""""""""""
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.vue,*.js'

" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml,vue,js'

"""""""""""""""""""""""""""""""""""""""""""
" Nerdcommenter plugin theme
"""""""""""""""""""""""""""""""""""""""""""
" " <leader>cc to comment, <leader>cu to uncomment
" " Add spaces after comment delimiters by default
" let g:NERDSpaceDelims = 1
" " Use compact syntax for prettified multi-line comments
" let g:NERDCompactSexyComs = 1
" " Align line-wise comment delimiters flush left instead of following code indentation
" let g:NERDDefaultAlign = 'left'
" " Set a language to use its alternate delimiters by default
" let g:NERDAltDelims_java = 1
" " Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" " Allow commenting and inverting empty lines (useful when commenting a region)
" let g:NERDCommentEmptyLines = 1
" " Enable trimming of trailing whitespace when uncommenting
" let g:NERDTrimTrailingWhitespace = 1
"
" if !exists('g:context_filetype#same_filetypes')
"    let g:context_filetype#filetypes = {}
"  endif
"
"  let g:context_filetype#filetypes.svelte =
"  \ [
"  \   {'filetype' : 'javascript', 'start' : '<script \?.*>', 'end' : '</script>'},
"  \   {
"  \     'filetype': 'typescript',
"  \     'start': '<script\%( [^>]*\)\? \%(ts\|lang="\%(ts\|typescript\)"\)\%( [^>]*\)\?>',
"  \     'end': '',
"  \   },
"  \   {'filetype' : 'css', 'start' : '<style \?.*>', 'end' : '</style>'},
"  \ ]
"
"  let g:ft = ''
"
" " Svelte/Vue settings
" let g:ft = ''
" function! NERDCommenter_before()
"   if (&ft == 'html') || (&ft == 'svelte')
"   let g:ft = &ft
"   let cfts = context_filetype#get_filetypes()
"   if len(cfts) > 0
"     if cfts[0] == 'svelte'
"       let cft = 'html'
"     elseif cfts[0] == 'scss'
"       let cft = 'css'
"     else
"       let cft = cfts[0]
"     endif
"     exe 'setf ' . cft
"     endif
"   endif
"
"   if &ft == 'vue'
"     let g:ft = 'vue'
"     let stack = synstack(line('.'), col('.'))
"     if len(stack) > 0
"       let syn = synIDattr((stack)[0], 'name')
"       if len(syn) > 0
"         exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
"       endif
"     endif
"   endif
" endfunction
"
" function! NERDCommenter_after()
"   if (g:ft == 'html') || (g:ft == 'svelte')
"   exec 'setf ' . g:ft
"   let g:ft = ''
"   endif
"
"   if g:ft == 'vue'
"     setf vue
"     let g:ft = ''
"   endif
" endfunction

" Making it faster
let g:vue_disable_pre_processors=1

"""""""""""""""""""""""""""""""""""""""""""
" Ale plugin
"""""""""""""""""""""""""""""""""""""""""""
highlight ALEErrorSign ctermfg=9
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed = 'normal'

" Vue settings
let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
let g:ale_linters = {'vue': ['tsserver', 'eslint', 'vls']}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'vue': ['eslint'],
\}


" Use these fixers
" let g:ale_linters = {
" \   '*':          ['remove_trailing_lines', 'trim_whitespace'],
" \   'javascript': ['prettier', 'eslint'],
" \   'vue':        ['tsserver', 'eslint', 'tslint', 'vls'],
" \}
" " let g:ale_linter_aliases = {'vue': ['vue', 'javascript']}
" let g:ale_fixers = {
" \   'javascript': ['prettier', 'eslint'],
" \   'vue':        ['prettier', 'eslint']
" \}

" noremap <Leader>ad :ALEGoToDefinition<CR>
" noremap <Leader>af :ALEFix<CR>
" noremap <Leader>ar :ALEFindReferences<CR>

"""""""""""""""""""""""""""""""""""""""""""
" Flow plugin
"""""""""""""""""""""""""""""""""""""""""""
" Use locally installed flow
let local_flow = finddir('node_modules', '.;') . '/.bin/flow'
if matchstr(local_flow, "^\/\\w") == ''
    let local_flow= getcwd() . "/" . local_flow
endif
if executable(local_flow)
  let g:flow#flowpath = local_flow
endif

let g:flow#autoclose = 1
let g:flow#enable = 1

"""""""""""""""""""""""""""""""""""""""""""
" Prettier
"""""""""""""""""""""""""""""""""""""""""""
" Prettier specific config
" if no prettier config enabled, it will use the one from :CocConfig

" If none specified, will use project's default
" let g:prettier#exec_cmd_async = 1
" let g:prettier#config#trailing_comma = 'none'
" let g:prettier#config#single_quote = 'false'
" let g:prettier#config#jsx_bracket_same_line = 'false'
" let g:prettier#config#bracket_spacing = 'true'

" Auto focus quickfix window when errors encountered
" let g:prettier#quickfix_auto_focus = 0

" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0

" Default is async
let g:prettier#exec_cmd_async = 1

" Do not autofocus the quickfix
let g:prettier#quickfix_auto_focus = 0

" Running Prettier before saving async (vim 8+)
let g:prettier#autoformat = 0
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue,*.svelte,*.yaml,*.html PrettierAsync
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue,*.svelte,*.yaml,*.html CocCommand prettier.formatFile
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue Prettier

" " format javascript on save with prettier
" " and prevent jumps at undo
" if executable('prettier')
"   autocmd BufWritePre *.js call PrettierFormat()
" endif
"
" "much of the following code is taken/repurposed from fatih/vim-go:
" "https://github.com/fatih/vim-go/blob/1425dec/autoload/go/fmt.vim
" function! PrettierFormat() abort
"   "save cursor position and many other things
"   let l:curw = winsaveview()
"
"   "write current unsaved buffer to a temp file
"   let l:tmpname = tempname()
"   call writefile(getline(1, '$'), l:tmpname)
"
"   "format temp file and replace actual file
"   let out = system('prettier --write ' . l:tmpname)
"   if v:shell_error == 0
"     call PrettierUpdateFile(l:tmpname, expand('%'))
"   else
"     "we didn't use the temp file, so clean up
"     call delete(l:tmpname)
"   endif
"
"   "restore our cursor/windows positions
"   call winrestview(l:curw)
" endfunction
"
" "replaces the target file with the formatted source file
" function! PrettierUpdateFile(source, target)
"   "remove undo point caused via BufWritePre
"   try | silent undojoin | catch | endtry
"
"   let old_fileformat = &fileformat
"   if exists('*getfperm')
"     "save file permissions
"     let original_fperm = getfperm(a:target)
"   endif
"
"   call rename(a:source, a:target)
"
"   "restore file permissions
"   if exists('*setfperm') && original_fperm != ''
"     call setfperm(a:target , original_fperm)
"   endif
"
"   "reload buffer to reflect latest changes
"   silent! edit!
"
"   let &fileformat = old_fileformat
"   let &syntax = &syntax
" endfunction

"""""""""""""""""""""""""""""""""""""""""""
" Fuzzy File Finder
"""""""""""""""""""""""""""""""""""""""""""
" Initialize configuration dictionary
let g:fzf_vim = {}

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" This is the default option:
"   - Preview window on the right with 50% width
"   - CTRL-/ will toggle preview window.
" - Note that this array is passed as arguments to fzf#vim#with_preview function.
" - To learn more about preview window options, see `--preview-window` section of `man fzf`.
let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']
let g:fzf_preview_window = ['right,50%', 'ctrl-/']

" default fzf layout
" - down / up / left / right
" let g:fzf_layout = { 'down': '~20%' }

" customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
" let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" ignore .gitignore files
" let $FZF_DEFAULT_COMMAND = 'ag --hidden -g ""'

" Hide statusline in neovim
" autocmd! FileType fzf
" autocmd  FileType fzf set laststatus=0 noshowmode noruler
"   \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler


"""""""""""""""""""""""""""""""""""""""""""
" Gitgutter
"""""""""""""""""""""""""""""""""""""""""""
let g:gitgutter_sign_added = '┃' "+
let g:gitgutter_sign_modified = '┃' "~
let g:gitgutter_sign_removed = '_'
let g:gitgutter_sign_removed_first_line = '‾'
" let g:gitgutter_sign_removed_above_and_below = '{'
" let g:gitgutter_sign_modified_removed = 'ww'

" }}}

" Color scheme {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !exists("g:syntax_on")
  syntax enable
endif

set t_Co=256

" enable base16-shell
" if filereadable(expand("~/.vimrc_background"))
"   let base16colorspace=256 " Access colors present in 256 colorspace"
"   source ~/.vimrc_background
" endif

if exists('$BASE16_THEME')
      \ && (!exists('g:colors_name') || g:colors_name != 'base16-$BASE16_THEME')
    let base16colorspace=256
    colorscheme base16-$BASE16_THEME
endif

" colorscheme base16-eighties

" Custom colors
"highlight VertSplit         ctermbg=236
"highlight ColorColumn       ctermbg=235
"highlight LineNr            ctermbg=236 ctermfg=240
"highlight CursorLineNr      ctermbg=236 ctermfg=240
"highlight CursorLine        ctermbg=236
"highlight StatusLineNC      ctermbg=238 ctermfg=0
"highlight StatusLine        ctermbg=240 ctermfg=12
"highlight IncSearch         ctermbg=3   ctermfg=1
"highlight Search            ctermbg=1   ctermfg=3
"highlight Visual            ctermbg=3   ctermfg=0
"highlight Pmenu             ctermbg=240 ctermfg=12
"highlight PmenuSel          ctermbg=3   ctermfg=1
"highlight SpellBad          ctermbg=0   ctermfg=1
" highlight ExtraWhitespace   ctermbg=1   guibg=red
highlight Comment cterm=italic
match ExtraWhitespace /\s\+$/

" transparent background
hi Normal guibg=NONE ctermbg=NONE

" highlight only cursor line number, instead of whole line
" hi clear CursorLine
" augroup CLClear
"   autocmd! ColorScheme * hi clear CursorLine
" augroup END
" hi CursorLineNR cterm=bold
" augroup CLNRSet
"   autocmd! ColorScheme * hi CursorLineNR cterm=bold
" augroup END

"}}}

" Autocmds {{{
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" autocmd FileType json syntax match Comment +\/\/.\+$+

" when closing a tab, open previous tab instead of next
autocmd TabClosed * tabprevious

augroup TrailingSpaces
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//e
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()
augroup END

augroup Shortcuts
  autocmd!
  " autocmd FileType c,javascript setlocal foldmethod=indent
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType javascript map <C-p> :FlowJumpToDef<CR>
  autocmd FileType javascript map <Localleader>t :FlowType<CR>
  autocmd FileType javascript map <leader>p :Prettier<CR>
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS<CR>
  " autocmd FileType postcss set omnifunc=csscomplete#CompleteCSS<CR>
augroup END

augroup BgHighlight
  autocmd!
  autocmd WinEnter * set colorcolumn=80
  autocmd WinLeave * set colorcolumn=0
augroup END

" augroup goyo_markdown
"   autocmd!
"   autocmd BufEnter * call s:auto_goyo()
" augroup END

" MDX files
autocmd BufNewFile,BufRead *.md setlocal filetype=markdown.md
autocmd BufNewFile,BufRead *.md setlocal syntax=markdown
autocmd BufNewFile,BufRead *.md setlocal conceallevel=2
autocmd BufNewFile,BufRead *.mdx setlocal filetype=markdown.mdx
autocmd BufNewFile,BufRead *.mdx setlocal syntax=markdown
autocmd BufNewFile,BufRead *.mdx setlocal conceallevel=2


" Vue files
autocmd BufNewFile,BufRead *.vue setlocal filetype=vue

" Vue posva
let g:vue_disable_pre_processors=1
let g:vue_pre_processors = 'detect_on_enter'
" autocmd FileType vue syntax sync fromstart
" autocmd FileType mdx syntax sync fromstart

autocmd BufEnter,BufRead * syntax sync fromstart
syntax sync minlines=10000
set redrawtime=10000

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
        \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" NERDTree
autocmd vimenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Update buffers on focus
autocmd! FocusGained,BufEnter * checktime

" Run Neoformat on save
" augroup fmt
"   autocmd!
"   autocmd BufWritePre * undojoin | Neoformat
" augroup END

augroup Reload
  autocmd!
  autocmd bufwritepost ~/.vimrc source $MYVIMRC
  autocmd bufwritepost ~/.vimrc call LightlineReload()
augroup END

" augroup Folds
"   autocmd!
"   autocmd BufWinLeave * mkview
"   autocmd BufWinEnter * silent! loadview
" augroup END
" }}}

" zR: open all folds
" zM: close all folds
" zE: delete all folds
" zf: create fold in Visual mode


"""""""""""""""""""""""""""""""""""""""""""
" Lua stuff goes here
"""""""""""""""""""""""""""""""""""""""""""
lua << EOF
vim.api.nvim_create_autocmd({ 'BufEnter', 'BufNewFile' }, {
  pattern = '.env*',
  command = 'set filetype=sh',
})

-- Treesitter
require 'nvim-treesitter.configs'.setup {
	ensure_installed = { "c", "lua", "vim", "javascript", "typescript", "html", "css", "vue", "svelte" },

	-- Install parsers synchronously (only applied to `ensure_installed`)
	sync_install = false,

	-- Automatically install missing parsers when entering buffer
	-- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
	auto_install = true,

	highlight = {
		-- `false` will disable the whole extension
		enable = true,

		-- Setting this to true will run `:h syntax` and tree-sitter at the same time.
		-- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
		-- Using this option may slow down your editor, and you may see some duplicate highlights.
		-- Instead of true it can also be a list of languages
		additional_vim_regex_highlighting = false,
	},
}

-- Gitsigns
require('gitsigns').setup {
  signs = {
    add          = { text = '┃' },
    change       = { text = '┃' },
    delete       = { text = '_' },
    topdelete    = { text = '‾' },
    changedelete = { text = '~' },
    untracked    = { text = '┆' },
  },
  signs_staged = {
    add          = { text = '┃' },
    change       = { text = '┃' },
    delete       = { text = '_' },
    topdelete    = { text = '‾' },
    changedelete = { text = '~' },
    untracked    = { text = '┆' },
  },
  signs_staged_enable = true,
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = true, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    follow_files = true
  },
  auto_attach = true,
  attach_to_untracked = false,
  current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
    delay = 2000,
    ignore_whitespace = false,
    virt_text_priority = 100,
    use_focus = true,
  },
  current_line_blame_formatter = '<author>, <author_time:%R> - <summary>',
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
  },
}

require('Comment').setup({
-- toggler = {
--          --Line-comment toggle keymap
--          line = '<leader>cc',
--          --Block-comment toggle keymap
--          block = 'gbc',
--      },
 })
EOF

